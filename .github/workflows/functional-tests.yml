name: Functional tests
on:
  push:
    branches:
      - test
  pull_request:
    branches:
      - main

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: us-west-2
  TF_VAR_domain: ${{ secrets.domain }}
  TF_VAR_state_bucket : ${{ secrets.state_bucket }}

jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - name: Clone repo
        uses: actions/checkout@v2
      - name: Package app
        run: |
          cd hello.app
          python3 -mvenv venv
          . ./venv/bin/activate
          pip install --upgrade pip && pip install --upgrade setuptools
          [[ -e requirements.txt ]] && pip install -r requirements.txt
          [[ -e build-requirements.txt ]] && pip install -r build-requirements.txt
          make
      - name: Save zipfile for later
        uses: actions/upload-artifact@v2
        with:
          name: zipfile
          path: hello.app/hello.zip
      - name: Terraform
        run: |
          sudo snap install terragrunt
          export TF_VAR_environment=${GITHUB_REF##*/}
          cd terraform
          terragrunt init
          terragrunt apply -auto-approve

  Test_REST_API:
    needs: Build
    runs-on: ubuntu-latest
    steps:
      - name: Clone repo
        uses: actions/checkout@v2
      - name: Test that the API GW works
        run: tests/integration/api-gw.sh
      - name: Test HTTPS
        run: tests/functional/https-output.sh

  Test_function-as-a-service:
    needs: Build
    runs-on: ubuntu-latest
    steps:
      - name: Clone repo
        uses: actions/checkout@v2
      - name: Test that the Lambda uses Python 3.6
        run:
          tests/integration/python.sh

  Cleanup:
    needs: [Build, Test_REST_API, Test_function-as-a-service]
    runs-on: ubuntu-latest
    steps:
      - name: Clone repo
        uses: actions/checkout@v2
      - name: Retrieve zipfile
        uses: actions/download-artifact@v2
        with:
          name: zipfile
          path: hello.app
      - name: Terraform
        run: |
          export TF_VAR_environment=${GITHUB_REF##*/}
          cd terraform
          terragrunt init
          terragrunt destroy -auto-approve
